// stylelint-disable selector-no-qualifying-type

//
// Base styles
//

.cherry-ui-btn {
    display: inline-block;
    font-weight: $btn-font-weight;
    text-align: center;
    white-space: nowrap;
    vertical-align: middle;
    user-select: none;
    cursor: pointer;
    border: $input-btn-border-width solid transparent;
    @include button-size($input-btn-padding-y, $input-btn-padding-x, $font-size-base, $input-btn-line-height, $btn-border-radius);
    @include transition($btn-transition);

    // Share hover and focus styles
    @include hover-focus {
      text-decoration: none;
    }
    &:focus,
    &.focus {
      outline: 0;
    }

    // Disabled comes first so active can properly restyle
    &.disabled,
    &:disabled {
      opacity: .5;
      cursor: default;
      @include box-shadow(none);
    }

    &:not([disabled]):not(.disabled):active,
    &:not([disabled]):not(.disabled).active {
      background-image: none;
      @include box-shadow($input-btn-focus-box-shadow, $btn-active-box-shadow);
    }
  }

  // Future-proof disabling of clicks on `<a>` elements
  a.cherry-ui-btn.disabled,
  fieldset[disabled] a.cherry-ui-btn {
    pointer-events: none;
  }


  //
  // Alternate buttons
  //

  @each $color, $value in $theme-colors {
    .cherry-ui-btn-#{$color} {
      @include button-variant($value, $value);
    }
  }

  @each $color, $value in $theme-colors {
    .cherry-ui-btn-outline-#{$color} {
      @if $color == "light" {
        @include button-outline-variant($value, #212529);
      } @else {
        @include button-outline-variant($value, #ffffff);
      }
    }
  }


  //
  // Link buttons
  //

  // Make a button look and behave like a link
  .cherry-ui-btn-link {
    font-weight: $font-weight-normal;
    color: $link-color;
    background-color: transparent;

    @include hover {
      color: $link-hover-color;
      text-decoration: $link-hover-decoration;
      background-color: transparent;
      border-color: transparent;
    }

    &:focus,
    &.focus {
      border-color: transparent;
      box-shadow: none;
    }

    &:disabled,
    &.disabled {
      color: $btn-link-disabled-color;
    }

    // No need for an active state here
  }


  //
  // Button Sizes
  //

  .cherry-ui-btn-lg {
    @include button-size($input-btn-padding-y-lg, $input-btn-padding-x-lg, $font-size-lg, $input-btn-line-height-lg, $btn-border-radius-lg);
  }

  .cherry-ui-btn-sm {
    @include button-size($input-btn-padding-y-sm, $input-btn-padding-x-sm, $font-size-sm, $input-btn-line-height-sm, $btn-border-radius-sm);
  }


  //
  // Block button
  //

  .cherry-ui-btn-block {
    display: block;
    width: 100%;
  }

  // Vertically space out multiple block buttons
  .cherry-ui-btn-block + .cherry-ui-btn-block {
    margin-top: $btn-block-spacing-y;
  }

  // Specificity overrides
  input[type="submit"],
  input[type="reset"],
  input[type="button"] {
    &.cherry-ui-btn-block {
      width: 100%;
    }
  }


  .cherry-ui-btn-circle {
    @include square($btn-circle-size);
    @include circle-button($btn-circle-size, 0, $font-size-base + 2px, 50%);

    &.cherry-ui-btn-lg {
        @include square($btn-circle-size-lg);
        @include circle-button($btn-circle-size-lg, 0, $font-size-lg + 2px, 50%);
    }

    &.cherry-ui-btn-sm {
        @include square($btn-circle-size-sm);
        @include circle-button($btn-circle-size-sm, 0, $font-size-sm + 2px, 50%);
  }
}

//loadding
.cherry-ui-btn-loading:before {
    display: block;
  }

  .cherry-ui-btn-loading{
    pointer-events: none;
  }
